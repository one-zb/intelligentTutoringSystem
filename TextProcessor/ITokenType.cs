namespace ITSText
{
    /// <summary>
    /// Represents a syntax token type that defines how tokens should be generated by a given text input.
    /// </summary>
    public interface ITokenType
    {
        /// <summary>
        /// Gets the name of the token.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Gets a value indicating whether the token value should added to the context.
        /// </summary>
        /// <value>
        /// <c>true</c> the token value should be added to the context; otherwise, <c>false</c>.
        /// </value>
        bool IsContextual { get; }

        /// <summary>
        /// Gets a value indicating whether this instance is optional.
        /// </summary>
        /// <value>
        /// <c>true</c> if this instance is optional; otherwise, <c>false</c>.
        /// </value>
        bool IsOptional { get; }

        /// <summary>
        /// Gets a value indicating whether the parsing direction should inverted in the position of the current token.
        /// </summary>
        /// <value>
        /// <c>true</c> if the parsing direction should be inverted; otherwise, <c>false</c>.
        /// </value>
        bool InvertParsing { get; }

        /// <summary>
        /// Tries to get a token from the input cursor.
        /// </summary>
        /// <param name="textCursor">The text cursor.</param>
        /// <param name="token">The extracted token.</param>
        /// <returns><c>true</c> if a token is extracted successfully; otherwise, <c>false</c>.</returns>
        bool TryGetTokenFromInput(ITextCursor textCursor, out object token); 
    }
}